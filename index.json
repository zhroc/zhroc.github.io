[{"content":"前言 本篇是对2024-02-25到2024-03-24这段时间生活的记录与思考。\n过完年到现在的这段时间里面，其实没有做到什么比较有价值的事情，复习的情况并不算太好，有的考试错过了报名时间，有的考试一考完就感觉要G了，仔细一想感觉这将近一年来又错过了好多的机会，似乎对自己也在慢慢的降低标准了，只是迫切的想要抓住一根救命稻草，明天再去探探情报。\n话说在这个小地方现在也开始抓骑电动车不带头盔的违法行为了，冬天的时候带着还好，还可以保暖，但是这马上都夏天了，戴个头盔也太热了，考虑到活动范围都不是很大，所以决定不骑电动车出行了，还是自行车好使，已经开始想着骑自行车通勤了，不得不说，他真的还是那么乐观，顺便可以每天都骑出去兜兜风，穿梭在学校路边，找回青春的感觉。\n很久没有写代码了，前几天帮别人写个项目写的乱七八糟，不过最后总算是把东西都实现了，以后还是少碰这玩意，早知道形势是这样的，当初就不学计算机了，不过以前的都没法改变的，还是想想怎么抓住救命稻草吧。\n状态调整 不管是生活状态还是学习状态都需要调整了，一方面是身体的状态，一方面是学习的状态，越早完成这些事，才能自由。\n下周 井然有序的过就好~\n","permalink":"https://www.cooleryue.cn/posts/life/20240324/","summary":"前言 本篇是对2024-02-25到2024-03-24这段时间生活的记录与思考。 过完年到现在的这段时间里面，其实没有做到什么比较有价值的事情，复习的情况并不算太好，有的考试错过了报名时间，有的考试一考完就感觉要G了，仔细一想感觉这将近一年来又错过了好多的机会，似乎对自己也在慢慢的","title":"周报 #1"},{"content":"准备工作 首先需要安装好python环境，下载好flask库 注册钉钉开放平台，进入应用开发界面，创建企业内部应用 记录好创建的应用的Client ID (原 AppKey 和 SuiteKey)和Client Secret (原 AppSecret 和 SuiteSecret)这两个数据 流程分析 本文一共需要使用到3个钉钉的api接口，分别是钉钉的页面登录授权、获取用户token接口和获取用户个人信息的接口。\n用户使用流程为，点击钉钉登录的超链接，此处为构造的钉钉登录授权页面url，用户使用钉钉账号登录后，带着code数据跳转至开发者设置的回调url中，开发者通过传过来的code使用钉钉接口获取用户tonken，然后再通过token来获取用户的个人信息（包含用户对于当前应用的唯一标识unionid），接着就可以按照登录成功的逻辑进行处理了。\n具体实现 构造钉钉登录授权页面url 按照钉钉开发者文档的要求进行构造，redirect_uri参数填写urlencode编码后的回调网址，client_id参数填写上文提到的应用的Client ID (原 AppKey 和 SuiteKey)即可，\n1 2 3 4 5 6 7 https://login.dingtalk.com/oauth2/auth? redirect_uri=https%3A%2F%2Fwww.aaaaa.com%2Fauth //换成自己的回调网址，需要进行urlencode \u0026amp;response_type=code \u0026amp;client_id=dingxxxxxxx //应用的AppKey \u0026amp;scope=openid //此处的openId保持不变 \u0026amp;state=dddd \u0026amp;prompt=consent 钉钉开放平台配置 进入钉钉开放平台应用管理，找到分享设置，在回调域名处填写好回调域名保存。 再找到权限管理处，开通通讯录个人信息读权限的权限。 钉钉开放平台配置就完成了。\n使用flask构建web服务 需要使用flask构建两个页面，第一个是将我们构造好的钉钉登录授权页面的url插入其中，第二个页面路径必须是自己设置的回调网址。简要代码如下。\n1 2 3 4 页面一 @app.route(\u0026#39;/\u0026#39;) def index(): return \u0026#39;\u0026lt;a href=\u0026#34;https://login.dingtalk.com/oauth2/auth?redirect_uri=https%3A%2F%2Fwww.aaaaa.com%2Fauth\u0026amp;response_type=code\u0026amp;client_id=dingpoksntxzuqmbz5oq\u0026amp;scope=openid\u0026amp;prompt=consent\u0026#34;\u0026gt;钉钉扫码登录\u0026lt;/a\u0026gt;\u0026#39; 第一个页面构建好了之后部署测试下能否成功进入钉钉登录授权页面，成功的话如下图所示。 页面二编写接收到code后的业务逻辑代码，实现通过code获取用户token，接着通过token获取用户的个人信息，别忘了将里面的appid和appsecret换成准备工作提到的两个数据。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 页面二 @app.route(\u0026#39;/auth\u0026#39;) def auth(): # 捕获code code = request.args.get(\u0026#39;code\u0026#39;) # 获取access_token，有效期2小时 access_token = get_access_token(code) # 获取user_info user_info = get_user_info(access_token) # 返回个人信息 return str(user_info) def get_access_token(code): appid = \u0026#39;xxx\u0026#39; appsecret = \u0026#39;xxx\u0026#39; token_url = \u0026#34;https://api.dingtalk.com/v1.0/oauth2/userAccessToken\u0026#34; json_data = { \u0026#34;clientId\u0026#34; : appid, \u0026#34;clientSecret\u0026#34; : appsecret, \u0026#34;code\u0026#34; : code, \u0026#34;grantType\u0026#34; : \u0026#34;authorization_code\u0026#34; } res = requests.post(token_url, json = json_data) res_dict = json.loads(res.text) access_token = res_dict.get(\u0026#39;accessToken\u0026#39;) return access_token def get_user_info(access_token): headers = { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;x-acs-dingtalk-access-token\u0026#39;: access_token } res = requests.get(\u0026#39;https://api.dingtalk.com/v1.0/contact/users/me\u0026#39;, headers = headers) res_dict = json.loads(res.text) # unionid = res_dict.get(\u0026#39;user_info\u0026#39;).get(\u0026#39;unionid\u0026#39;) # print(\u0026#34;unionid为{}\u0026#34;.format(unionid)) # return unionid return res_dict 简单整理一下，完整代码如下。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 from flask import Flask #导入Flask类 from flask import request import time, requests, urllib, json app=Flask(__name__) #实例化并命名为app实例 @app.route(\u0026#39;/\u0026#39;) def index(): return \u0026#39;\u0026lt;a href=\u0026#34;https://login.dingtalk.com/oauth2/auth?redirect_uri=https%3A%2F%2Fwww.aaaaa.com%2Fauth\u0026amp;response_type=code\u0026amp;client_id=dingpoksntxzuqmbz5oq\u0026amp;scope=openid\u0026amp;prompt=consent\u0026#34;\u0026gt;钉钉扫码登录\u0026lt;/a\u0026gt;\u0026#39; @app.route(\u0026#39;/auth\u0026#39;) def auth(): # 捕获code code = request.args.get(\u0026#39;code\u0026#39;) # 获取access_token，有效期2小时 access_token = get_access_token(code) # 获取user_info user_info = get_user_info(access_token) # 返回个人信息 return str(user_info) def get_access_token(code): appid = \u0026#39;xxx\u0026#39; appsecret = \u0026#39;xxx\u0026#39; token_url = \u0026#34;https://api.dingtalk.com/v1.0/oauth2/userAccessToken\u0026#34; json_data = { \u0026#34;clientId\u0026#34; : appid, \u0026#34;clientSecret\u0026#34; : appsecret, \u0026#34;code\u0026#34; : code, \u0026#34;grantType\u0026#34; : \u0026#34;authorization_code\u0026#34; } res = requests.post(token_url, json = json_data) res_dict = json.loads(res.text) access_token = res_dict.get(\u0026#39;accessToken\u0026#39;) return access_token def get_user_info(access_token): headers = { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;x-acs-dingtalk-access-token\u0026#39;: access_token } res = requests.get(\u0026#39;https://api.dingtalk.com/v1.0/contact/users/me\u0026#39;, headers = headers) res_dict = json.loads(res.text) # unionid = res_dict.get(\u0026#39;user_info\u0026#39;).get(\u0026#39;unionid\u0026#39;) # print(\u0026#34;unionid为{}\u0026#34;.format(unionid)) # return unionid return res_dict if __name__==\u0026#34;__main__\u0026#34;: app.run(port=8080,host=\u0026#34;127.0.0.1\u0026#34;,debug=True) 测试 部署好并启动服务进行访问，会有钉钉扫码登录的一个超链接 点击超链接跳转到钉钉登录的页面 通过钉钉登录后会展示获取的用户信息 拿到个人信息后就可以无缝接入用户登录成功后的逻辑代码了，比如返回token之类的。\n参考文章\n钉钉开放平台实现登录第三方网站 ","permalink":"https://www.cooleryue.cn/posts/dingtalk_sso_login/","summary":"准备工作 首先需要安装好python环境，下载好flask库 注册钉钉开放平台，进入应用开发界面，创建企业内部应用 记录好创建的应用的Client ID (原 AppKey 和 SuiteKey)和Client Secret (原 AppSecret 和 SuiteSecret)这两个数据 流程分析 本文一共需要使用到3个钉钉的api接口，分别是","title":"flask实现网站接入钉钉sso登录"},{"content":"创建密钥对 首先在客户端设备上打开终端，Windows端打开命令行即可，然后创建密钥对，这里使用ed25519的算法生成key，关于ssh key的各种不同算法的选择可以参考这里\n1 ssh-keygen -t ed25519 随后一路回即可，密钥对一般会保存在当前用户的隐藏目录.ssh中，windows用户应该去C:\\Users\\用户名\\.ssh\\寻找，linux用户应该去/home/用户名/.ssh/寻找，该目录应该包含两个密钥文件，.pub后缀的文件是公钥，无后缀的为私钥，私钥不需要移动，两个文件如下图所示。 添加公钥内容至服务端 我们需要将公钥中的内容追加到服务端的/home/用户名/.ssh/目录中的authorized_key文件中去。如果没有上述目录与文件，则需要手动创建。可以通过密码连接ssh后用vim直接编辑authorized_key文件，当然也可以使用以下命令进行添加，两者的效果是一致的。\n1 cat ~/.ssh/id_ed25519.pub | ssh username@remote_host \u0026#34;mkdir -p ~/.ssh \u0026amp;\u0026amp; touch ~/.ssh/authorized_keys \u0026amp;\u0026amp; chmod -R go= ~/.ssh \u0026amp;\u0026amp; cat \u0026gt;\u0026gt; ~/.ssh/authorized_keys\u0026#34; 服务端ssh连接配置修改 在服务端打开/etc/ssh/sshd_config配置文件，在空白处添加以下内容后保存退出。\n1 2 PubkeyAuthentication yes PasswordAuthentication no 接着重启ssh服务即可\n1 sudo systemctl restart ssh 尝试密钥登录 现在就可以在客户端重新尝试ssh连接了，会发现不需要密码就连接上了。\n参考文章\nlinux设置ssh密钥登录详细教程 ","permalink":"https://www.cooleryue.cn/posts/ssh-disable-password-login/","summary":"创建密钥对 首先在客户端设备上打开终端，Windows端打开命令行即可，然后创建密钥对，这里使用ed25519的算法生成key，关于ssh key的各种不同算法的选择可以参考这里 1 ssh-keygen -t ed25519 随后一路回即可，密钥对一般会保存在当前用户的隐藏目录.ssh中，windows用户应该去C:\\Us","title":"使用密钥连接ssh 关闭密码连接ssh"},{"content":"准备工作 创建好hugo源文件仓库和github pages仓库（均不要添加readme文件）,更新一下索引和软件包\n1 2 apt update apt upgrade 下载安装hugo 1 2 3 wget https://github.com/spf13/hugo/releases/download/v0.14/hugo_0.14_amd64.deb dpkg -i hugo*.deb hugo version 创建站点配置主题 1 hugo new site myblog 进入目录初始化git和使用模块方式管理主题\n1 2 3 cd myblog/ git init git submodule add https://github.com/zhroc/hugo-PaperMod.git themes/hugo-PaperMod 复制主题中这些文件到站点目录 新建一篇文章并预览\n1 2 hugo new posts/blog-test.md hugo server -D 添加github action 在 .github/workflows目录下新建deploy.yml文件 填写好以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 name: deploy on: push: workflow_dispatch: schedule: # Runs everyday at 8:00 AM - cron: \u0026#34;0 0 * * *\u0026#34; jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build Web run: hugo - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: zhroc/zhroc.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 创建github的token 进入https://github.com/settings/tokens 创建经典令牌 权限需要开启 repo 与 workflow 进入github的Settings - Secrets - Actions - Repository secrets - New repository secret 添加 PERSONAL_TOKEN 环境变量为刚才的 Token\n关联提交远程仓库 设置好git用户名\n1 2 git config --global user.email \u0026#34;git@github.com\u0026#34; git config --global user.name \u0026#34;zhroc\u0026#34; 提交\n1 2 3 4 5 git remote add origin https://github.com/zhroc/zhroc-blog.git git add . git status git commit -m \u0026#34;new\u0026#34; git push -u origin main 参考文章\nhugo博客搭建 | PaperMod主题 Hugo + GitHub Action，搭建你的博客自动发布系统 从零开始的 Hugo 博客搭建 ","permalink":"https://www.cooleryue.cn/posts/deploy_blog_study/","summary":"准备工作 创建好hugo源文件仓库和github pages仓库（均不要添加readme文件）,更新一下索引和软件包 1 2 apt update apt upgrade 下载安装hugo 1 2 3 wget https://github.com/spf13/hugo/releases/download/v0.14/hugo_0.14_amd64.deb dpkg -i hugo*.deb hugo version 创建站点配置主题 1 hugo new site myblog 进入目录初始化git和使用模块方式管理主题 1 2 3 cd myblog/ git init git submodule add https://github.com/zhroc/hugo-PaperMod.git themes/hugo-PaperMod 复制主题中这些文件到站点目录","title":"博客部署简要记录"}]